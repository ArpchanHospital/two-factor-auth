package org.bahmni.auth.twofactor.service;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.bahmni.auth.twofactor.ResponseConstants;
import org.bahmni.auth.twofactor.model.OTP;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Service
public class OTPService {
    private static Logger logger = LogManager.getLogger(OTPService.class);

    private Map<String, List<OTP>> generatedOtps = new ConcurrentHashMap<>();
    private Map<String, Integer> otpAttempts = new ConcurrentHashMap<>();
    private Map<String, Integer> resendAttempts = new ConcurrentHashMap<>();
    private SecureRandom secureRandom = new SecureRandom();

    @Autowired
    private OTPConfiguration otpConfiguration;

    public OTP generateAndSaveOtpFor(String userName) {
        OTP otp = new OTP(generateOTP(), System.currentTimeMillis());
        pushOTP(userName, otp);
        clearAllAttemptsCount(userName);
        logger.info("OTP " + otp + " generated for " + userName);
        return otp;
    }

    public OTP regenerateAndSaveOtpFor(String userName) {
        OTP otp = new OTP(generateOTP(), System.currentTimeMillis());
        pushOTP(userName, otp);

        Integer attempts = resendAttempts.get(userName);
        if (attempts == null) {
            attempts = 0;
        }
        attempts++;
        if (attempts > otpConfiguration.getMaxResendAttempts()) {
            logger.error("Max resend attempts exceeded by " + userName);
            clearAllAttemptsCount(userName);
            return null;
        }
        logger.info("Resend attempt #" + attempts + " OTP " + otp + " re-generated for " + userName);
        resendAttempts.put(userName, attempts);
        return otp;
    }

    private String generateOTP() {
        byte[] random = new byte[otpConfiguration.getOTPLength()];
        secureRandom.nextBytes(random);
        StringBuilder stringBuilder = new StringBuilder();
        for (byte b : random) {
            stringBuilder.append(Math.abs(b % 10));
        }
        return stringBuilder.toString();
    }


    private void clearAllAttemptsCount(String userName) {
        otpAttempts.remove(userName);
        resendAttempts.remove(userName);
    }

    public String validateOTPFor(String userName, String receivedOtp) {
        List<OTP> otps = generatedOtps.get(userName);

        if (otps != null) {
            for (int i=0;i< otps.size();i++) {
                OTP otp=otps.get(i);
                if (otp.toString().equals(receivedOtp)) {
                    if (otp.isExpired(otpConfiguration.getExpiryTimeIntervalInMillis())) {
                        logger.error("Expired OTP " + receivedOtp + " sent by " + userName);
                        otps.remove(otp);
                        continue;
                    }
                    logger.info("OTP " + receivedOtp + " validation successful for " + userName);
                    clearAllAttemptsCount(userName);
                    return ResponseConstants.SUCCESS;
                }

            }
            Integer attempts = otpAttempts.get(userName);
            if (attempts == null) {
                attempts = 0;
            }
            attempts++;
            if (attempts >= otpConfiguration.getMaxOTPAttempts()) {
                logger.warn("Failed attempt #" + attempts + " using OTP " + receivedOtp + " by " + userName);
                logger.error("Max failed OTP attempts exceeded for " + userName);
                clearAllAttemptsCount(userName);
                return ResponseConstants.MAX_ATTEMPTS_EXCEEDED;
            }
            otpAttempts.put(userName, attempts);
            logger.warn("Failed attempt #" + attempts + " using OTP " + receivedOtp + " by " + userName);
        } else {
            logger.error("OTP " + receivedOtp + " sent by " + userName + " is not generated by the system");
        }
        return ResponseConstants.FAILED;
    }

    private void pushOTP(String userName, OTP otp){
        List<OTP> otps= generatedOtps.get(userName);
        if(null == otps){
            otps = new ArrayList();
        }
        otps.add(otp);
        generatedOtps.put(userName, otps);
    }
}